/// <reference types="cypress" />

// Cypress는 describe, it, beforeEach, cy 등을 전역으로 제공하므로 import가 필요 없습니다.

describe('캘린더 E2E 테스트', () => {
  beforeEach(() => {
    cy.clock(new Date('2025-08-01T10:00:00'));
    cy.visit('/');
  });

  describe('1. 기본 CRUD (Create, Read, Update, Delete)', () => {
    it('사용자가 새 일정을 성공적으로 추가하고 캘린더에서 확인할 수 있다', () => {
      const eventTitle = 'Cypress로 추가한 새 일정';

      cy.get('button').contains('일정 추가').click();

      cy.get('#title').type(eventTitle);
      cy.get('#date').type('2025-08-10');
      cy.get('#start-time').type('10:00');
      cy.get('#end-time').type('11:00');
      cy.get('#description').type('Cypress 테스트');
      cy.get('#location').type('Cypress 테스트');

      cy.get('[data-testid="event-submit-button"]').click();

      cy.get('[data-testid="month-view"]').should('contain', eventTitle);
      cy.get('[data-testid="event-list"]').should('contain', eventTitle);
    });

    it('시나리오: 사용자가 새 단일 일정을 성공적으로 생성한다', () => {
      // Given: 사용자가 '일정 추가' 버튼을 누르고,
      // When: 모든 필드를 유효하게 채운 뒤 저장한다.
      // Then: '일정이 추가되었습니다' 알림이 나타나야 한다.
      // And: 캘린더와 오른쪽 이벤트 목록에 새로운 일정이 표시되어야 한다.
    });

    it('시나리오: 사용자가 기존 일정을 성공적으로 수정한다', () => {
      // Given: 초기 일정이 화면에 표시된 상태에서,
      // When: 오른쪽 목록에서 특정 일정의 '수정' 버튼을 누르고, 제목과 설명을 변경한 뒤 저장한다.
      // Then: '일정이 수정되었습니다' 알림이 나타나야 한다.
      // And: 캘린더와 이벤트 목록에 수정된 내용이 반영되어야 한다.
    });

    it('시나리오: 사용자가 기존 일정을 삭제한다', () => {
      // Given: 초기 일정이 화면에 표시된 상태에서,
      // When: 오른쪽 목록에서 특정 일정의 '삭제' 버튼을 누른다.
      // Then: '일정이 삭제되었습니다' 알림이 나타나야 한다.
      // And: 캘린더와 이벤트 목록에서 해당 일정이 사라져야 한다.
    });
  });

  describe('2. 반복 일정 기능', () => {
    it("시나리오: 사용자가 '매주' 반복 일정을 생성한다", () => {
      // Given: 사용자가 '2025-08-04'(월요일)을 시작일로 선택하고,
      // When: 반복 옵션을 '매주', 종료일을 '2025-08-18'로 설정하고 저장한다.
      // Then: 캘린더의 8월 4일, 11일, 18일에 모두 해당 일정이 반복 아이콘과 함께 표시되어야 한다.
    });

    it("시나리오: 사용자가 반복 일정의 '가상 인스턴스'만 수정한다", () => {
      // Given: '매주' 반복되는 "주간 회의" 일정이 있는 상태에서,
      // When: 캘린더의 '8월 11일' 칸에 있는 "주간 회의"를 클릭하여 제목을 "특별 회의"로 수정한다.
      // Then: '8월 11일' 칸에는 "특별 회의"가 표시되고 반복 아이콘이 없어야 한다.
      // And: '8월 4일'과 '8월 18일' 칸에는 여전히 "주간 회의"가 반복 아이콘과 함께 표시되어야 한다.
    });

    it("시나리오: 사용자가 반복 일정의 '원본'을 삭제한다", () => {
      // Given: '매주' 반복되는 "주간 회의" 일정이 있는 상태에서,
      // When: 오른쪽 이벤트 목록에서 '원본'인 "주간 회의"의 삭제 버튼을 누른다.
      // Then: 캘린더에 있던 모든 "주간 회의" 일정이 사라져야 한다.
    });
  });

  describe('3. 캘린더 뷰 및 검색', () => {
    it('시나리오: 사용자가 뷰를 전환하고 날짜를 이동한다', () => {
      // Given: 8월 캘린더가 보이는 상태에서,
      // When: 'Next' 버튼을 누른다.
      // Then: 캘린더 제목이 '2025년 9월'로 바뀌어야 한다.
      // When: 뷰 타입을 'Week'으로 변경한다.
      // Then: '2025년 9월 1주'와 같은 주간 뷰가 표시되어야 한다.
    });

    it('시나리오: 사용자가 키워드로 일정을 검색한다', () => {
      // Given: '팀 회의'와 '점심 약속' 일정이 있는 상태에서,
      // When: 오른쪽 검색창에 '회의'라고 입력한다.
      // Then: 오른쪽 이벤트 목록에 '팀 회의'만 남고, '점심 약속'은 사라져야 한다.
      // When: 검색창을 비운다.
      // Then: 두 일정이 모두 다시 표시되어야 한다.
    });
  });

  describe('4. 유효성 검사 및 예외 처리', () => {
    it('시나리오: 사용자가 필수 필드를 비우고 일정을 생성하려고 한다', () => {
      // When: 사용자가 '일정 추가' 폼에서 제목을 입력하지 않고 저장 버튼을 누른다.
      // Then: "필수 정보를 모두 입력해주세요"라는 에러 알림이 나타나야 한다.
      // And: 폼은 닫히지 않아야 한다.
    });

    it('시나리오: 사용자가 겹치는 시간에 일정을 생성하려고 한다', () => {
      // Given: '10:00 ~ 11:00'에 "기존 회의" 일정이 있는 상태에서,
      // When: 사용자가 '10:30 ~ 11:30'에 "새로운 회의"를 생성하려고 한다.
      // Then: "일정 겹침 경고" 다이얼로그가 나타나야 한다.
      // When: "계속 진행" 버튼을 누른다.
      // Then: 겹침 경고 다이얼로그가 닫히고, "새로운 회의"가 정상적으로 추가되어야 한다.
    });
  });
});
